#include <WiFi.h>
#include <HTTPClient.h>
#include <Update.h>

// WiFi credentials
const char* ssid = "POCO X6 Neo 5G";
const char* password = "nikhil9598";

// GitHub repository information
const char* githubRepo = "sawarn-nik/EQMS";
const char* firmwareFile = "firmware.bin"; // Your firmware filename
const char* versionFile = "version.txt";   // File containing version number

// Current firmware version (increment this for each release)
const float CURRENT_VERSION = 1.0;

// Pins
#define LED_BUILTIN 2

void setup() {
  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  
  connectToWiFi();
  
  checkForUpdates();
}

void loop() {
  // Blink LED to show normal operation
  digitalWrite(LED_BUILTIN, HIGH);
  delay(5000);
  digitalWrite(LED_BUILTIN, LOW);
  delay(5000);
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void checkForUpdates() {
  Serial.println("Checking for updates...");
  
  // Get latest version number from GitHub
  float latestVersion = getLatestVersion();
  
  if (latestVersion > CURRENT_VERSION) {
    Serial.println("New firmware available!");
    Serial.print("Current version: ");
    Serial.println(CURRENT_VERSION);
    Serial.print("Latest version: ");
    Serial.println(latestVersion);
    
    if (downloadAndUpdateFirmware()) {
      Serial.println("Update successful! Rebooting...");
      ESP.restart();
    } else {
      Serial.println("Update failed");
    }
  } else {
    Serial.println("Already running the latest version");
  }
}

float getLatestVersion() {
  HTTPClient http;
  String url = "https://raw.githubusercontent.com/" + String(githubRepo) + "/main/" + String(versionFile);
  
  http.begin(url);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    return payload.toFloat();
  }
  
  http.end();
  return CURRENT_VERSION; // If failed to check, assume current version is latest
}

bool downloadAndUpdateFirmware() {
  HTTPClient http;
  String url = "https://raw.githubusercontent.com/" + String(githubRepo) + "/main/" + String(firmwareFile);
  
  Serial.println("Downloading firmware...");
  http.begin(url);
  
  int httpCode = http.GET();
  if (httpCode != HTTP_CODE_OK) {
    Serial.println("Failed to download firmware");
    http.end();
    return false;
  }
  
  // Get file size
  int contentLength = http.getSize();
  if (contentLength <= 0) {
    Serial.println("Invalid content length");
    http.end();
    return false;
  }
  
  // Check if enough space is available
  if (contentLength > (ESP.getFreeSketchSpace() - 0x1000)) {
    Serial.println("Not enough space for update");
    http.end();
    return false;
  }
  
  // Begin update
  if (!Update.begin(contentLength)) {
    Serial.println("Cannot begin update");
    http.end();
    return false;
  }
  
  // Write firmware in chunks
  WiFiClient* stream = http.getStreamPtr();
  uint8_t buff[128] = { 0 };
  size_t written = 0;
  
  while (http.connected() && written < contentLength) {
    size_t size = stream->available();
    if (size) {
      int c = stream->readBytes(buff, ((size > sizeof(buff)) ? sizeof(buff) : size));
      Update.write(buff, c);
      written += c;
      
      // Show progress
      Serial.print("Progress: ");
      Serial.print((written * 100) / contentLength);
      Serial.println("%");
    }
    delay(1);
  }
  
  http.end();
  
  if (written != contentLength) {
    Serial.println("Download incomplete");
    return false;
  }
  
  if (!Update.end()) {
    Serial.println("Update failed");
    return false;
  }
  
  if (!Update.isFinished()) {
    Serial.println("Update not finished");
    return false;
  }
  
  Serial.println("Update complete");
  return true;
}
